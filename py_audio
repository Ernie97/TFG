from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.lang import Builder
from kivy.app import App
from kivy.clock import Clock
from kivy.uix.textinput import TextInput
from kivy.uix.switch import Switch

import os
import pyaudio, wave

import numpy as np
from scipy.io import wavfile


Builder.load_string('''
<AudioTool>
  orientation: 'vertical'
  Label:
    id: display_label
    text: ''

  BoxLayout:
    size_hint: 1, .2
    TextInput:
      id: user_input
      text: '0'
      on_text: root.enforce_numeric()
  BoxLayout:
    Button:
      id: start_button
      text: 'Start Recording'
      on_release: root.startRecording_clock()
    Button:
      id: stop_button
      text: 'Reproducir'
      on_release: root.stopRecording()
      disabled: True
''')

class AudioApp(App):
    def build(self):
        return AudioTool()



class AudioTool(BoxLayout):
    def __init__(self, **kwargs):
        super(AudioTool, self).__init__(**kwargs)

        self.start_button = self.ids['start_button']
        self.stop_button = self.ids['stop_button']
        self.display_label = self.ids['display_label']
        self.user_input = self.ids['user_input']



    def enforce_numeric(self):
        '''Make sure the textinput only accepts numbers'''
        if self.user_input.text.isdigit() == False:
            digit_list = [num for num in self.user_input.text if num.isdigit()]
            self.user_input.text = "".join(digit_list)

    def startRecording_clock(self):

        self.display_label.text = 'Recording...'
        self.duration = int(self.user_input.text)  # Take the input from the user and convert to a number
        self.start_button.disabled = True  # Prevents the user from clicking start again which may crash the program
        Clock.schedule_once(self.startRecording)  ## NEW start the recording


    def startRecording(self, dt):  # NEW start the recorder
        self.MyRecorder()
        self.display_label.text = 'Finished Recording'
        self.stop_button.disabled = False

    def stopRecording(self):
        self.display_label.text = 'Reproduciendo...'
        self.reproductor()
        self.start_button.disabled = False
        self.stop_button.disabled = True  # TUT 3
        self.display_label.text = ""


    def MyRecorder(self):

        CHUNK = 1024;
        FORMAT = pyaudio.paInt16;
        CHANNELS = 2;
        RATE = 44100
        p = pyaudio.PyAudio()
        stream = p.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True,
                                  # ahora es flujo de entrada
                                  frames_per_buffer=CHUNK)  # tamanio buffer == CHUNK !!

        frames = []  # lista de samples
        i = self.duration
        while (i > 0 ):
            self.display_label.text = str(i)
            data = stream.read(CHUNK)  # recogida de samples
            frames.append(data)
            i -= 1

        stream.stop_stream();
        stream.close();
        p.terminate()

        # guardamos wav
        wf = wave.open("record.wav", 'wb')
        wf.setnchannels(CHANNELS);
        wf.setsampwidth(p.get_sample_size(FORMAT));
        wf.setframerate(RATE)
        wf.writeframes(b''.join(frames))
        wf.close()

    def reproductor(self):
        fs, data = wavfile.read('record.wav')
        # miramos formato de samples
        if data.dtype.name == 'int16':
            fmt = 2
        elif data.dtype.name == 'int32':
            fmt = 4
        elif data.dtype.name == 'float32':
            fmt = 4
        elif data.dtype.name == 'uint8':
            fmt = 1
        else:
            raise Exception('Not supported')
        p = pyaudio.PyAudio()
        CHUNK = 1024
        stream = p.open(format=p.get_format_from_width(fmt),channels=len(data.shape),rate=fs,frames_per_buffer=CHUNK,output=True)

        # En data tenemos el wav completo, ahora procesamos por bloques (chunks)
        bloque = np.arange(CHUNK, dtype=data.dtype)
        numBloque = 0

        i = self.duration
        while i > 0:
            #nuevo bloque
            bloque = data[numBloque * CHUNK: numBloque * CHUNK + CHUNK]
            # pasamos al stream haciendo conversion de tipo
            stream.write(bloque.astype((data.dtype)).tobytes())
            numBloque += 1
            i -= 1
        stream.stop_stream()
        stream.close()
        p.terminate()


if __name__ == '__main__':
    AudioApp().run()